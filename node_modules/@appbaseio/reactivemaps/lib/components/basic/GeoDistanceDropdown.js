'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _downshift = require('downshift');

var _downshift2 = _interopRequireDefault(_downshift);

var _emotionTheming = require('emotion-theming');

var _actions = require('@appbaseio/reactivecore/lib/actions');

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _Title = require('@appbaseio/reactivesearch/lib/styles/Title');

var _Title2 = _interopRequireDefault(_Title);

var _Input = require('@appbaseio/reactivesearch/lib/styles/Input');

var _Input2 = _interopRequireDefault(_Input);

var _InputIcon = require('@appbaseio/reactivesearch/lib/styles/InputIcon');

var _InputIcon2 = _interopRequireDefault(_InputIcon);

var _Container = require('@appbaseio/reactivesearch/lib/styles/Container');

var _Container2 = _interopRequireDefault(_Container);

var _SearchSvg = require('@appbaseio/reactivesearch/lib/components/shared/SearchSvg');

var _SearchSvg2 = _interopRequireDefault(_SearchSvg);

var _Dropdown = require('@appbaseio/reactivesearch/lib/components/shared/Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _utils = require('@appbaseio/reactivesearch/lib/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GeoDistanceDropdown = function (_Component) {
	_inherits(GeoDistanceDropdown, _Component);

	function GeoDistanceDropdown(props) {
		_classCallCheck(this, GeoDistanceDropdown);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		_this.type = 'geo_distance';
		_this.locked = false;
		_this.coordinates = null;
		_this.autocompleteService = null;

		if (props.autoLocation) {
			_this.getUserLocation();
		}

		var currentLocation = null;
		var currentDistance = 0;

		props.addComponent(props.componentId);
		props.setQueryListener(props.componentId, props.onQueryChange, null);
		_this.setReact(props);

		if (props.value) {
			currentLocation = props.value.location;
			var selected = props.data.find(function (item) {
				return item.label === props.value.label;
			});

			currentDistance = selected.distance;
		} else if (props.selectedValue) {
			currentLocation = props.selectedValue.location;
			var _selected = props.data.find(function (item) {
				return item.label === props.selectedValue.label;
			});

			currentDistance = _selected.distance;
		} else if (props.defaultValue) {
			currentLocation = props.defaultValue.location;
			var _selected2 = props.data.find(function (item) {
				return item.label === props.defaultValue.label;
			});
			currentDistance = _selected2.distance;
		}

		_this.state = {
			currentLocation: currentLocation,
			currentDistance: currentDistance,
			userLocation: null,
			suggestions: [],
			isOpen: false
		};
		_this.getCoordinates(currentLocation, function () {
			_this.setDistance(currentDistance);
		});
		return _this;
	}

	GeoDistanceDropdown.prototype.componentDidMount = function componentDidMount() {
		this.autocompleteService = new window.google.maps.places.AutocompleteService();
	};

	GeoDistanceDropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		var _this2 = this;

		(0, _helper.checkPropChange)(this.props.react, prevProps.react, function () {
			return _this2.setReact(_this2.props);
		});

		(0, _helper.checkSomePropChange)(this.props, prevProps, ['dataField', 'nestedField'], function () {
			_this2.updateQuery(_this2.state.currentDistance, _this2.props);
		});

		if (this.props.value && !(0, _helper.isEqual)(this.props.value, prevProps.value)) {
			this.setValues(this.props.value, this.props);
		} else if (this.props.selectedValue && this.props.selectedValue.label && this.props.selectedValue.location && !(0, _helper.isEqual)(this.state.currentLocation, this.props.selectedValue.location) && !(0, _helper.isEqual)(this.props.selectedValue, prevProps.selectedValue)) {
			var _props = this.props,
			    value = _props.value,
			    onChange = _props.onChange;


			if (value === undefined) {
				this.setValues(this.props.selectedValue, this.props);
			} else if (onChange) {
				onChange(this.props.selectedValue);
			}
		} else if (!(0, _helper.isEqual)(this.props.selectedValue, prevProps.selectedValue) && !this.props.selectedValue) {
			var _props2 = this.props,
			    _value = _props2.value,
			    _onChange = _props2.onChange;

			if (_value === undefined) {
				// eslint-disable-next-line
				this.setState({
					currentLocation: null,
					currentDistance: null
				}, function () {
					_this2.updateQuery(null);
				});
			} else if (_onChange) {
				_onChange(null);
			}
		}
	};

	GeoDistanceDropdown.prototype.componentWillUnmount = function componentWillUnmount() {
		this.props.removeComponent(this.props.componentId);
	};

	GeoDistanceDropdown.prototype.setReact = function setReact(props) {
		if (props.react) {
			props.watchComponent(props.componentId, props.react);
		}
	};

	GeoDistanceDropdown.prototype.getUserLocation = function getUserLocation() {
		var _this3 = this;

		navigator.geolocation.getCurrentPosition(function (location) {
			var coordinates = location.coords.latitude + ', ' + location.coords.longitude;

			fetch('https://maps.googleapis.com/maps/api/geocode/json?key=' + _this3.props.mapKey + '&v=weekly&latlng=' + coordinates).then(function (res) {
				return res.json();
			}).then(function (res) {
				if (Array.isArray(res.results) && res.results.length) {
					var userLocation = res.results[0].formatted_address;
					_this3.setState({
						userLocation: userLocation
					});
				}
			}).catch(function (e) {
				console.error(e);
			});
		});
	};

	GeoDistanceDropdown.prototype.getCoordinates = function getCoordinates(value, cb) {
		var _this4 = this;

		if (value) {
			fetch('https://maps.googleapis.com/maps/api/geocode/json?key=' + this.props.mapKey + '&v=weekly&address=' + value).then(function (res) {
				return res.json();
			}).then(function (res) {
				if (Array.isArray(res.results) && res.results.length) {
					var location = res.results[0].geometry.location;

					_this4.coordinates = location.lat + ', ' + location.lng;
				}
			}).then(function () {
				if (cb) cb();
			}).catch(function (e) {
				console.error(e);
			});
		}
	};

	GeoDistanceDropdown.prototype.render = function render() {
		return _react2.default.createElement(
			_Container2.default,
			{ style: this.props.style, className: this.props.className },
			this.props.title && _react2.default.createElement(
				_Title2.default,
				{ className: (0, _helper.getClassName)(this.props.innerClass, 'title') || null },
				this.props.title
			),
			this.renderSearchBox(),
			_react2.default.createElement(_Dropdown2.default, {
				innerClass: this.props.innerClass,
				items: this.props.data,
				onChange: this.onDistanceChange,
				selectedItem: this.getSelectedLabel(this.state.currentDistance),
				placeholder: 'Select distance',
				keyField: 'label',
				returnsObject: true,
				themePreset: this.props.themePreset
			})
		);
	};

	return GeoDistanceDropdown;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
	var _this5 = this;

	this.setValues = function (selected, props) {
		var selectedDistance = props.data.find(function (item) {
			return item.label === selected.label;
		});
		_this5.setState({
			currentLocation: selected.location,
			currentDistance: selectedDistance.distance
		});
		_this5.getCoordinates(selected.location, function () {
			_this5.setDistance(selectedDistance.distance);
		});
	};

	this.defaultQuery = function (coordinates, distance, props) {
		var query = null;
		if (coordinates && distance) {
			var _this5$type, _query;

			query = (_query = {}, _query[_this5.type] = (_this5$type = {
				distance: '' + distance + props.unit
			}, _this5$type[props.dataField] = coordinates, _this5$type), _query);
		}

		if (query && props.nestedField) {
			return {
				query: {
					nested: {
						path: props.nestedField,
						query: query
					}
				}
			};
		}
		return query;
	};

	this.getSelectedLabel = function (distance) {
		return _this5.props.data.find(function (item) {
			return item.distance === distance;
		});
	};

	this.setLocation = function (currentValue) {
		var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this5.props;

		// ignore state updates when component is locked
		if (props.beforeValueChange && _this5.locked) {
			return;
		}

		_this5.locked = true;

		var performUpdate = function performUpdate() {
			_this5.setState({
				currentLocation: currentValue.value,
				isOpen: false
			}, function () {
				_this5.getCoordinates(currentValue.value, function () {
					if (_this5.state.currentDistance) {
						_this5.updateQuery(_this5.state.currentDistance);
						if (props.onValueChange) {
							props.onValueChange({
								label: _this5.getSelectedLabel(_this5.state.currentDistance),
								location: currentValue.value
							});
						}
					}
					_this5.locked = false;
				});
			});
		};

		(0, _helper.checkValueChange)(props.componentId, {
			label: _this5.getSelectedLabel(_this5.state.currentDistance),
			location: currentValue.value
		}, props.beforeValueChange, performUpdate);
	};

	this.setDistance = function (currentDistance) {
		_this5.setState({
			currentDistance: currentDistance
		}, function () {
			_this5.updateQuery(currentDistance, _this5.props);
			if (_this5.props.onValueChange) {
				_this5.props.onValueChange({
					label: _this5.getSelectedLabel(currentDistance),
					location: _this5.state.currentLocation
				});
			}
		});
	};

	this.updateQuery = function (distance) {
		var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this5.props;
		var componentId = props.componentId,
		    customQuery = props.customQuery,
		    filterLabel = props.filterLabel,
		    showFilter = props.showFilter,
		    URLParams = props.URLParams;

		var selectedDistance = _this5.getSelectedLabel(distance);
		var value = null;
		if (selectedDistance) {
			value = {
				label: selectedDistance.label,
				location: _this5.state.currentLocation
			};
		}
		var query = _this5.defaultQuery(_this5.coordinates, distance, props);
		if (customQuery) {
			var customQueryTobeSet = customQuery(_this5.coordinates, distance, props);
			if (customQueryTobeSet.query) {
				query = customQueryTobeSet.query;
			}
			props.setQueryOptions(_this5.props.componentId, (0, _helper.getOptionsFromQuery)(customQueryTobeSet));
		}
		props.updateQuery({
			componentId: componentId,
			query: query,
			value: value,
			label: filterLabel,
			showFilter: showFilter,
			URLParams: URLParams
		});
	};

	this.renderIcon = function () {
		if (_this5.props.showIcon) {
			return _this5.props.icon || _react2.default.createElement(_SearchSvg2.default, null);
		}
		return null;
	};

	this.onDistanceChange = function (value) {
		var _props3 = _this5.props,
		    onChange = _props3.onChange,
		    valueProp = _props3.value;

		if (valueProp === undefined) {
			_this5.setDistance(value.distance);
		} else if (onChange) {
			onChange({ label: value.label, location: _this5.state.currentLocation });
		}
	};

	this.onInputChange = function (e) {
		var value = e.target.value;
		var _props4 = _this5.props,
		    onChange = _props4.onChange,
		    propValue = _props4.value;


		if (propValue === undefined) {
			_this5.setState({
				currentLocation: value
			});
		} else if (onChange) {
			onChange({
				location: value,
				label: _this5.props.value.label
			});
		}
		if (value.trim()) {
			if (!_this5.autocompleteService) {
				_this5.autocompleteService = new window.google.maps.places.AutocompleteService();
			}

			var restrictedCountries = _this5.props.countries || [];

			_this5.autocompleteService.getPlacePredictions(_extends({
				input: value,
				componentRestrictions: { country: restrictedCountries }
			}, _this5.props.serviceOptions), function (res) {
				var suggestionsList = res && res.map(function (place) {
					return {
						label: place.description,
						value: place.description
					};
				}) || [];

				_this5.setState({
					suggestions: suggestionsList
				});
			});
		} else {
			_this5.setState({
				suggestions: []
			});
		}
	};

	this.handleFocus = function (event) {
		_this5.setState({
			isOpen: true
		});
		if (_this5.props.onFocus) {
			_this5.props.onFocus(event);
		}
	};

	this.handleOuterClick = function () {
		var _props5 = _this5.props,
		    onChange = _props5.onChange,
		    value = _props5.value;


		if (value === undefined) {
			_this5.setLocation({ value: _this5.state.currentLocation });
		} else if (onChange) {
			onChange({
				location: _this5.state.currentLocation,
				label: _this5.props.value.label
			});
		}
	};

	this.handleStateChange = function (changes) {
		var isOpen = changes.isOpen,
		    type = changes.type;

		if (type === _downshift2.default.stateChangeTypes.mouseUp) {
			_this5.setState({
				isOpen: isOpen
			});
		}
	};

	this.handleLocation = function (data) {
		var _props6 = _this5.props,
		    value = _props6.value,
		    onChange = _props6.onChange;


		if (value === undefined) {
			_this5.setLocation(data);
		} else if (onChange) {
			onChange({
				location: data.value,
				label: _this5.props.value.label
			});
		}
	};

	this.renderSearchBox = function () {
		var suggestionsList = [].concat(_this5.state.suggestions);
		var _props7 = _this5.props,
		    theme = _props7.theme,
		    themePreset = _props7.themePreset;


		if (_this5.state.userLocation) {
			suggestionsList = [{
				label: 'Use my current location',
				value: _this5.state.userLocation
			}].concat(_this5.state.suggestions);
		}

		return _react2.default.createElement(_downshift2.default, {
			onChange: _this5.handleLocation,
			onOuterClick: _this5.handleOuterClick,
			onStateChange: _this5.handleStateChange,
			isOpen: _this5.state.isOpen,
			itemToString: function itemToString(i) {
				return i;
			},
			render: function render(_ref) {
				var getInputProps = _ref.getInputProps,
				    getItemProps = _ref.getItemProps,
				    isOpen = _ref.isOpen,
				    highlightedIndex = _ref.highlightedIndex;
				return _react2.default.createElement(
					'div',
					{ className: _Input.suggestionsContainer },
					_react2.default.createElement(_Input2.default, _extends({
						showIcon: _this5.props.showIcon,
						iconPosition: _this5.props.iconPosition,
						innerRef: _this5.props.innerRef
					}, getInputProps({
						className: (0, _helper.getClassName)(_this5.props.innerClass, 'input'),
						placeholder: _this5.props.placeholder,
						value: _this5.state.currentLocation || '',
						onChange: _this5.onInputChange,
						onBlur: _this5.props.onBlur,
						onFocus: _this5.handleFocus,
						onKeyPress: _this5.props.onKeyPress,
						onKeyDown: _this5.handleKeyDown,
						onKeyUp: _this5.props.onKeyUp
					}), {
						themePreset: themePreset
					})),
					_react2.default.createElement(
						_InputIcon2.default,
						{ iconPosition: _this5.props.iconPosition },
						_this5.renderIcon()
					),
					isOpen && _this5.state.suggestions.length ? _react2.default.createElement(
						'ul',
						{
							className: (0, _Input.suggestions)(themePreset, theme) + ' ' + (0, _helper.getClassName)(_this5.props.innerClass, 'list')
						},
						suggestionsList.slice(0, 11).map(function (item, index) {
							return _react2.default.createElement(
								'li',
								_extends({}, getItemProps({ item: item }), {
									key: item.label,
									style: {
										backgroundColor: highlightedIndex === index ? '#eee' : '#fff'
									}
								}),
								typeof item.label === 'string' ? _react2.default.createElement('div', {
									className: 'trim',
									dangerouslySetInnerHTML: {
										__html: item.label
									}
								}) : item.label
							);
						})
					) : null
				);
			}
		});
	};
};

GeoDistanceDropdown.propTypes = {
	addComponent: _types2.default.funcRequired,
	mapKey: _types2.default.stringRequired,
	removeComponent: _types2.default.funcRequired,
	selectedValue: _types2.default.selectedValue,
	setQueryListener: _types2.default.funcRequired,
	themePreset: _types2.default.themePreset,
	updateQuery: _types2.default.funcRequired,
	watchComponent: _types2.default.funcRequired,
	// component props
	autoLocation: _types2.default.bool,
	beforeValueChange: _types2.default.func,
	className: _types2.default.string,
	componentId: _types2.default.stringRequired,
	countries: _types2.default.stringArray,
	customQuery: _types2.default.func,
	data: _types2.default.data,
	dataField: _types2.default.stringRequired,
	defaultValue: _types2.default.selectedValue,
	filterLabel: _types2.default.string,
	icon: _types2.default.children,
	iconPosition: _types2.default.iconPosition,
	innerClass: _types2.default.style,
	innerRef: _types2.default.func,
	nestedField: _types2.default.string,
	onBlur: _types2.default.func,
	onChange: _types2.default.func,
	onFocus: _types2.default.func,
	onKeyDown: _types2.default.func,
	onKeyPress: _types2.default.func,
	onKeyUp: _types2.default.func,
	onQueryChange: _types2.default.func,
	onValueChange: _types2.default.func,
	placeholder: _types2.default.string,
	react: _types2.default.react,
	setQueryOptions: _types2.default.funcRequired,
	value: _types2.default.selectedValue,
	showFilter: _types2.default.bool,
	showIcon: _types2.default.bool,
	style: _types2.default.style,
	theme: _types2.default.style,
	title: _types2.default.title,
	unit: _types2.default.string,
	URLParams: _types2.default.bool,
	serviceOptions: _types2.default.props
};

GeoDistanceDropdown.defaultProps = {
	className: null,
	placeholder: 'Select a value',
	showFilter: true,
	style: {},
	URLParams: false,
	countries: [],
	autoLocation: true,
	unit: 'mi'
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		mapKey: state.config.mapKey,
		selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,
		themePreset: state.config.themePreset
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		addComponent: function addComponent(component) {
			return dispatch((0, _actions.addComponent)(component));
		},
		removeComponent: function removeComponent(component) {
			return dispatch((0, _actions.removeComponent)(component));
		},
		updateQuery: function updateQuery(updateQueryObject) {
			return dispatch((0, _actions.updateQuery)(updateQueryObject));
		},
		watchComponent: function watchComponent(component, react) {
			return dispatch((0, _actions.watchComponent)(component, react));
		},
		setQueryListener: function setQueryListener(component, onQueryChange, beforeQueryChange) {
			return dispatch((0, _actions.setQueryListener)(component, onQueryChange, beforeQueryChange));
		},
		setQueryOptions: function setQueryOptions(component, props) {
			return dispatch((0, _actions.setQueryOptions)(component, props));
		}
	};
};

exports.default = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(GeoDistanceDropdown));